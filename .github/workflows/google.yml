# This workflow will build a Docker container for a Streamlit app, publish it to Google Artifact Registry,
# and deploy it to Google Kubernetes Engine (GKE) when there is a push to the "main" branch.
#
# Prerequisites and Configuration:
#
# 1. Enable the following Google Cloud APIs:
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at:
#    https://support.google.com/googleapi/answer/6158841
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml,
#    service.yml, and a Dockerfile for your Streamlit app.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation
#
# 4. Grant IAM permissions to the service account that will be used:
#    The following roles are required:
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    For detailed instructions on managing access and granting permissions, see:
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Update the values in the "env" block below to match your Google Cloud setup.
name: 'Build and Deploy Streamlit App to GKE'
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
env:
  PROJECT_ID: 'my-project'  # TODO: update to your Google Cloud project ID
  GAR_LOCATION: 'us-central1'  # TODO: update to your Artifact Registry location
  GKE_CLUSTER: 'streamlit-cluster'  # TODO: update to your GKE cluster name
  GKE_ZONE: 'us-central1-c'  # TODO: update to your GKE cluster zone
  DEPLOYMENT_NAME: 'streamlit-app'  # TODO: update to your deployment name
  REPOSITORY: 'streamlit-repo'  # TODO: update to your Artifact Registry repository name
  IMAGE: 'streamlit-app'  # TODO: update to your desired image name
  WORKLOAD_IDENTITY_PROVIDER: 'projects/helical-glass-474405-a4/locations/global/workloadIdentityPools/myapppool/providers/MyAppOIDCProvider'  # TODO: update to your workload identity provider
  SERVICE_ACCOUNT: 'github-actions@helical-glass-474405-a4.iam.gserviceaccount.com'  # TODO: update to your service account email
jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy Streamlit App'
    runs-on: 'ubuntu-latest'
    environment: 'production'
    
    # Required permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      # Step 1: Checkout the repository code
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      
      # Step 2: Authenticate to Google Cloud using Workload Identity Federation
      # This step uses Workload Identity Provider to authenticate without service account keys
      # For more authentication options, see: https://github.com/google-github-actions/auth
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          audience: '//iam.googleapis.com/projects/helical-glass-474405-a4/locations/global/workloadIdentityPools/myapppool/providers/MyAppOIDCProvider'
      
      # Step 3: Authenticate Docker to Google Cloud Artifact Registry
      # This allows us to push Docker images to the registry
      - name: 'Docker Auth to Artifact Registry'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
      
      # Step 4: Set up Docker Buildx for multi-platform builds (optional but recommended)
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      
      # Step 5: Build the Streamlit app Docker image and push to Artifact Registry
      # The image is tagged with the Git SHA for versioning
      - name: 'Build and Push Streamlit Docker Image'
        run: |
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"
          DOCKER_TAG_LATEST="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:latest"
          
          echo "Building Docker image: ${DOCKER_TAG}"
          docker build \
            --tag "${DOCKER_TAG}" \
            --tag "${DOCKER_TAG_LATEST}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .
          
          echo "Pushing Docker image to Artifact Registry"
          docker push "${DOCKER_TAG}"
          docker push "${DOCKER_TAG_LATEST}"
      
      # Step 6: Get GKE credentials to interact with the Kubernetes cluster
      - name: 'Get GKE Credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'
      
      # Step 7: Set up Kustomize for Kubernetes manifest management
      - name: 'Set up Kustomize'
        run: |
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz
          chmod u+x ./kustomize
          ./kustomize version
      
      # Step 8: Deploy the Streamlit app to GKE
      # This updates the Kubernetes deployment with the new image and applies changes
      - name: 'Deploy Streamlit App to GKE'
        run: |
          # Set the new image in the kustomization
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}
          
          # Apply the Kubernetes manifests
          ./kustomize build . | kubectl apply -f -
          
          # Wait for the deployment to roll out successfully
          kubectl rollout status deployment/${DEPLOYMENT_NAME}
          
          # Display the service details
          kubectl get services -o wide
          
          echo "Streamlit app deployment completed successfully!"
      
      # Step 9: Output the deployment information
      - name: 'Display Deployment Info'
        run: |
          echo "Deployment Name: ${DEPLOYMENT_NAME}"
          echo "Image: ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"
          kubectl get deployment ${DEPLOYMENT_NAME} -o wide
          kubectl describe deployment ${DEPLOYMENT_NAME}
# Additional Notes:
# - For managing IAM permissions and access control, refer to:
#   https://cloud.google.com/iam/docs/manage-access-other-resources
# - Ensure your Dockerfile exposes the correct port for Streamlit (typically 8501)
# - Your deployment.yml should configure the service to expose the Streamlit port
# - Consider setting up Cloud Load Balancer for production traffic
